import axios from "axios";
import { toast } from "react-toastify";
import { LogoutUser } from "~/store/slice/authSlice";
import { refreshTokenApi } from "~/components/apis";

/**
 * Kh√¥ng th·ªÉ import { store } from '~/redux/store' theo c√°ch th√¥ng th∆∞·ªùng ·ªü ƒë√¢y
 * Gi·∫£i ph√°p: Inject store: l√† k·ªπ thu·∫≠t khi c·∫ßn s·ª≠ d·ª•ng redux store ·ªü c√°c file ngo√†i ph·∫°m vi component
 nh∆∞ file authorizeAxios hi·ªán t·∫°i
 * Hi·ªÉu ƒë∆°n gi·∫£n: Khi ·ª©ng d·ª•ng b·∫Øt ƒë·∫ßu ch·∫°y l√™n, code s·∫Ω ch·∫°y v√†o main.jsx ƒë·∫ßu ti√™n, t·ª´ b√™n ƒë√≥ ta g·ªçi
 h√†m injectStore ngay l·∫≠p t·ª©c ƒë·ªÉ g√°n bi·∫øn mainStore v√†o bi·∫øn axiosReduxStore c·ª•c b·ªô trong file n√†y.
 * https://redux.js.org/faq/code-structure#how-can-i-use-the-redux-store-in-non-component-files
 */
let axiosReduxStore;
export const injectStore = (mainstore) => {
  axiosReduxStore = mainstore;
};

//Kh·ªüi t·∫°o 1 ƒë·ªëi t∆∞·ª£ng Axios (authorizeAxiosInstance) m·ª•c ƒë√≠ch ƒë·ªÉ custom v√† c·∫•u h√¨nh chung cho d·ª± √°n
let authorizeAxiosInstance = axios.create();

//Th·ªùi gian ch·ªù t·ªëi ƒëa c·ªßa 1 request: ƒë·ªÉ 10 ph√∫t
authorizeAxiosInstance.defaults.timeout = 1000 * 60 * 10;

//withCredential: S·∫Ω cho ph√©p axios g·ª≠i cookie trong m·ªói request l√™n BE (ph·ª•c v·ª• vi·ªác ch√∫ng ta s·∫Ω l∆∞u JWT Token (refresh and access) v√†o httpOnly Cookie c·ªßa tr√¨nh duy·ªát)
authorizeAxiosInstance.defaults.withCredentials = true;

// Interceptors request can thi·ªáp v√†o gi·ªØa nh·ªØng c√°i request API
authorizeAxiosInstance.interceptors.request.use(
  (config) => {
    //

    return config;
  },
  (error) => {
    // Do something with request error
    return Promise.reject(error);
  }
);

// Kh·ªüi t·∫°o 1 promise cho vi·ªác g·ªçi api refreshToken
// M·ª•c ƒë√≠ch t·∫°o Promise n√†y ƒë·ªÉ khi n√†o g·ªçi api refreshToken xong xu√¥i th√¨ m·ªõi retry l·∫°i nhi·ªÅu api b·ªã l·ªói tr∆∞·ªõc ƒë·ªë
// https://www.thedutchlab.com/inzichten/using-axios-interceptors-for-refreshing-your-api-token
let refreshTokenPromise = null;

// Interceptors response can thi·ªáp v√†o gi·ªØa nh·ªØng c√°i response API nh·∫≠n v·ªÅ
authorizeAxiosInstance.interceptors.response.use(
  (response) => {
    //

    return response;
  },
  (error) => {
    // X·ª≠ l√Ω RefreshToken t·ª± ƒë·ªông
    // G·ªçi api refresh token ƒë·ªÉ l√†m m·ªõi l·∫°i accessToken
    const originalRequests = error.config;
    console.log("üöÄ ~ originalRequests:", originalRequests);

    if (error.response?.status && !originalRequests._retry) {
      // G√°n th√™m m·ªôt gi√° tr·ªã _retry = true trong kho·∫£ng th·ªùi gian ch·ªù, ƒë·∫£m b·∫£o vi·ªác refresh token n√†y ch·ªâ lu√¥n g·ªçi 1 l·∫ßn t·∫°i 1 th·ªùi ƒëi·ªÉm (nh√¨n l·∫°i ƒëi·ªÅu ki·ªán if ngay ph√≠a tr√™n)
      originalRequests._retry = true;

      // Ki·ªÉm tra xem n·∫øu ch∆∞a c√≥ refreshTokenPromise th√¨ th·ª±c hi·ªán g√°n vi·ªác g·ªçi api refresh_token ƒë·ªìng th·ªùi g√°n v√†o cho c√°i refreshTokenPromise
      if (!refreshTokenPromise) {
        refreshTokenPromise = refreshTokenApi()
          .then((data) => {
            // ƒê·ªìng th·ªùi accesstoken ƒë√£ n·∫±m trong httpOnly cookie (x·ª≠ l√Ω ph√≠a BE)
            return data?.accessToken;
          })
          .catch((_error) => {
            // N·∫øu c√≥ b·∫•t k·ª≥ l·ªói n√†o => Logout lu√¥n
            axiosReduxStore.dispatch(LogoutUser());
            return Promise.reject(_error);
          })
          .finally(() => {
            // D√π api c√≥ ok hay l·ªói th√¨ v·∫´n lu√¥n g√°n l·∫°i c√°i refreshTokenPromise v·ªÅ null nh∆∞ ban ƒë·∫ßu
            refreshTokenPromise = null;
          });
      }

      // C·∫ßn return tr∆∞·ªùng h·ª£p refreshTokenPromise ch·∫°y th√†nh c√¥ng v√† x·ª≠ l√Ω th√™m ·ªü ƒë√¢y:
      // eslint-disable-next-line no-unused-vars
      return refreshTokenPromise.then((accessToken) => {
        // Return l·∫°i axios instance c·ªßa ch√∫ng ta k·∫øt h·ª£p c√°c originalRequests ƒë·ªÉ g·ªçi l·∫°i nh·ªØng api ban ƒë·∫ßu b·ªã l·ªói
        return authorizeAxiosInstance(originalRequests);
      });
    }

    // X·ª≠ l√Ω l·ªói (n·∫øu c√≥)
    let errorMessage = error?.message;
    if (error.response?.data?.message) {
      errorMessage = error.response?.data?.message;
    }

    toast.error(errorMessage);

    return Promise.reject(error);
  }
);

export default authorizeAxiosInstance;
